//! Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2))

use super::hasher::{Hasher, HasherCore};

/// SHA-224 digest size in bits
const SHA224_DIGEST_SIZE_BIT: usize = 224;
/// SHA-256 digest size in bits
const SHA256_DIGEST_SIZE_BIT: usize = 256;
/// SHA-384 digest size in bits
const SHA384_DIGEST_SIZE_BIT: usize = 384;
/// SHA-512 digest size in bits
const SHA512_DIGEST_SIZE_BIT: usize = 512;

mod core256;
mod core512;

/* -------------------------------------------------------------------------------- */

/// Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2)), SHA-224 variant
///
/// # Example
///
/// ```
/// use cryptography::hash::{Sha224, Digest};
///
/// let hash = [ 0xd1, 0x4a, 0x02, 0x8c, 0x2a, 0x3a, 0x2b, 0xc9, 0x47, 0x61, 0x02, 0xbb, 0x28, 0x82,
///              0x34, 0xc4, 0x15, 0xa2, 0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a, 0xc5, 0xb3, 0xe4, 0x2f, ];
/// let result = Sha224::new().update("").digest();
/// assert_eq!(result, hash);
///
/// ```
pub type Sha224 = Hasher<core256::Sha256Core, SHA224_DIGEST_SIZE_BIT>;

/// Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2)), SHA-256 variant
///
/// # Example
///
/// ```
/// use cryptography::hash::{Sha256, Digest};
///
/// let hash = [ 0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
///              0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55, ];
/// let result = Sha256::new().update("").digest();
/// assert_eq!(result, hash);
///
/// ```
pub type Sha256 = Hasher<core256::Sha256Core, SHA256_DIGEST_SIZE_BIT>;

/// Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2)), SHA-384 variant
///
/// # Example
///
/// ```
/// use cryptography::hash::{Sha384, Digest};
///
/// let hash = [ 0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38, 0x4c, 0xd9, 0x32, 0x7e,
///              0xb1, 0xb1, 0xe3, 0x6a, 0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43,
///              0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda, 0x27, 0x4e, 0xde, 0xbf,
///              0xe7, 0x6f, 0x65, 0xfb, 0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b, ];
/// let result = Sha384::new().update("").digest();
/// assert_eq!(result, hash);
///
/// ```
pub type Sha384 = Hasher<core512::Sha512Core, SHA384_DIGEST_SIZE_BIT>;

/// Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2)), SHA-512 variant
///
/// # Example
///
/// ```
/// use cryptography::hash::{Sha512, Digest};
///
/// let hash = [ 0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
///              0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
///              0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
///              0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e, ];
/// let result = Sha512::new().update("").digest();
/// assert_eq!(result, hash);
///
/// ```
pub type Sha512 = Hasher<core512::Sha512Core, SHA512_DIGEST_SIZE_BIT>;

/// Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2)), SHA-512/224 variant
///
/// # Example
///
/// ```
/// use cryptography::hash::{Sha512_224, Digest};
///
/// let hash = [ 0x6e, 0xd0, 0xdd, 0x02, 0x80, 0x6f, 0xa8, 0x9e, 0x25, 0xde, 0x06, 0x0c, 0x19, 0xd3,
///              0xac, 0x86, 0xca, 0xbb, 0x87, 0xd6, 0xa0, 0xdd, 0xd0, 0x5c, 0x33, 0x3b, 0x84, 0xf4, ];
/// let result = Sha512_224::new().update("").digest();
/// assert_eq!(result, hash);
///
/// ```
pub type Sha512_224 = Hasher<core512::Sha512Core, SHA224_DIGEST_SIZE_BIT>;

/// Secure Hash Algorithm 2 ([SHA-2](https://en.wikipedia.org/wiki/SHA-2)), SHA-512/256 variant
///
/// # Example
///
/// ```
/// use cryptography::hash::{Sha512_256, Digest};
///
/// let hash = [ 0xc6, 0x72, 0xb8, 0xd1, 0xef, 0x56, 0xed, 0x28, 0xab, 0x87, 0xc3, 0x62, 0x2c, 0x51, 0x14, 0x06,
///              0x9b, 0xdd, 0x3a, 0xd7, 0xb8, 0xf9, 0x73, 0x74, 0x98, 0xd0, 0xc0, 0x1e, 0xce, 0xf0, 0x96, 0x7a, ];
/// let result = Sha512_256::new().update("").digest();
/// assert_eq!(result, hash);
///
/// ```
pub type Sha512_256 = Hasher<core512::Sha512Core, SHA256_DIGEST_SIZE_BIT>;
